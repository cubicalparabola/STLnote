#include<iostream>
#include<stdexcept>
using namespace std;

template <typename T>
class Stack {
    T* array;
    int top;
    int capacity;

public:
    Stack(int size) {
        if (size <= 0) {
            throw invalid_argument("Size must be greater than 0");
        }
        top = 0;
        capacity = size;
        array = new T[capacity];
    }//构造函数

    bool isFull() {
        return (top == capacity);
    }//判断满栈

    bool isEmpty() {
        return (top == 0);
    }//判断空栈

    void push(T item) {
        if (isFull()) {
            throw overflow_error("Stack is full. Can't push");
        }
        array[top++] = item;
        cout << item << " pushed to stack\n";
    }//压入元素

    T pop() {
        if (isEmpty()) {
            throw underflow_error("Stack is empty. Can't pop");
        }
        return array[--top];
    }//弹出元素

    T peek() {
        if (isEmpty()) {
            throw underflow_error("Stack is empty. Can't peek");
        }
        return array[top - 1];
    }//获取栈顶
};

int main() {
    try {
        Stack<int> stack(2);
        stack.push(10);
        stack.push(20);
        stack.push(30);
        cout << stack.pop() << " popped from stack" << endl;
    }
    catch (exception& e) {
        cerr << "Caught exception: " << e.what() << endl;//cerr标准错误输出流
    }
    return 0;
}

